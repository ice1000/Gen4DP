package dp

import (
	"dp/err"
	"dp/util/sb"
	"fmt"
	"strings"
	"time"
)

func loopWith(loopVar string, style codeStyle) string {
	begin := 0
	if style.UseArrayFromOne {
		begin++
	}
	return fmt.Sprintf("for (%s=%d; %s<=%s_len; ++%s) {",
		loopVar,
		begin,
		loopVar,
		loopVar,
		loopVar)
}

func (info *dyProInfo) getLoopVarsDefinition() string {
	return strings.Join(
		info.State.DimExpr,
		",")
}

func (info *dyProInfo) getLoopVarRangesDefinition(sep string) string {
	return strings.Join(
		info.State.DimExpr,
		"_len"+sep) + "_len"
}

func StringCommaToBraces(s string) string {
	return strings.Replace(s, ",", "][", -1)
}

/// core code generation function
func (info *dyProInfo) GenerateClang(style codeStyle) string {
	if err.HasError() {
		return "Unable to generate code."
	}
	ret := sb.NewStringBuffer()
	ret.AppendComment("Generated by Gen4DP at: " +
		time.Now().Format(time.UnixDate))
	ret.AppendComment("Language: C++")
	ret.AppendComment("This open source generator is under Apache 2.0 license.")
	ret.AppendComment("Source: https://github.com/ice1000/Gen4DP")

	ret.AppendLine(
		"#include <iostream>\n" +
			"#include <algorithm>\n" +
			"using namespace std;")
	if style.UseDefine {
		ret.AppendFormat("#define SIZE %d\n",
			info.Detail.MaxLen)
		ret.AppendLine("#define number " +
			info.Type)
	} else {
		ret.AppendFormat("const int SIZE=%d;\n", info.Detail.MaxLen)
		ret.AppendLine("typedef " + info.Type + "number;")
	}
	ret.Append("number " + info.State.Name)
	ret.AppendLine(
		strings.Repeat("[SIZE]", len(info.State.DimExpr)) + ";")
	ret.AppendLine("")
	ret.AppendLineIndent("int main(const int argc, const char *argv[]) {")
	ret.AppendLine(
		"int " +
			info.getLoopVarsDefinition() + "," +
			info.getLoopVarRangesDefinition(",") + ";")
	ret.AppendLine(
		"cin>>" +
			info.getLoopVarRangesDefinition(">>") + ";")
	var dyPro func(int)
	dyPro = func(idx int) {
		if idx >= len(info.State.DimExpr) {
			for index, i := range info.Branches {
				if index >= 1 && index <= len(info.Branches)-2 {
					ret.AppendLineIndent(
						"else if (" + i.Conditions + ") {")
				} else if index == 0 {
					ret.AppendLineIndent(
						"if (" + i.Conditions + ") {")
				} else {
					ret.AppendLineIndent("else {")
				}
				ret.AppendFormat(
					"%s = %s;\n",
					StringCommaToBraces(info.State.NameExpr),
					StringCommaToBraces(i.Expression))
				ret.AppendLineClose("}")
			}
			return
		} else {
			ret.AppendLineIndent(
				loopWith(
					info.State.DimExpr[idx],
					style))
			dyPro(idx + 1)
			ret.AppendLineClose("}")
		}
	}
	dyPro(0)
	ret.AppendFormat("cout<<%s[%s]<<endl;\n",
		info.State.Name,
		info.getLoopVarRangesDefinition("]["))
	// add codes in main func
	ret.AppendLine("return 0;")
	ret.AppendLineClose("}")
	return ret.ToString()
}
